{
	"openapi": "3.1.0",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "Identity",
			"description": "Service to provide all features related to digital identity."
		},
		{
			"name": "Identity Profile",
			"description": "Service to provide all features related to digital identity profiles."
		}
	],
	"paths": {
		"/identity/{identity}": {
			"get": {
				"operationId": "identityResolve",
				"summary": "Resolve an identity",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"responses": {
					"200": {
						"description": "Response to resolving an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/did/DidDocument"
								},
								"examples": {
									"identityResolveResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "identityRemove",
				"summary": "Remove an identity",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity": {
			"post": {
				"operationId": "identityCreate",
				"summary": "Create an identity",
				"tags": [
					"Identity"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityCreateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/did/DidDocument"
								},
								"examples": {
									"identityCreateResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method": {
			"post": {
				"operationId": "identityVerificationMethodCreate",
				"summary": "Create an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification method for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verification method.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerificationMethodCreateRequest"
							},
							"examples": {
								"identityVerificationMethodCreateRequestExample": {
									"value": {
										"verificationMethodType": "assertionMethod",
										"verificationMethodId": "my-assertion"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verification method.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/did/DidDocumentVerificationMethod"
								},
								"examples": {
									"identityVerificationMethodCreateResponseExample": {
										"value": {
											"id": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0#my-assertion",
											"controller": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0",
											"type": "JsonWebKey2020",
											"publicKeyJwk": {
												"kty": "OKP",
												"alg": "EdDSA",
												"kid": "f_fj3rGsZFSYvnS_xv5MgyIBlExq-lgDciu0YQ--S3s",
												"crv": "Ed25519",
												"x": "SFm32z7y9C17olpaTeocG25WV2CNTUl5MhM679Z4bok"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method/{verificationMethodId}": {
			"delete": {
				"operationId": "identityVerificationMethodRemove",
				"summary": "Remove an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the verification method from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "verificationMethodId",
						"description": "The verification method to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-assertion"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service": {
			"post": {
				"operationId": "identityServiceCreate",
				"summary": "Create an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the service for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a service.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityServiceCreateRequest"
							},
							"examples": {
								"identityServiceCreateRequestExample": {
									"value": {
										"serviceId": "did:example:123#linked-domain",
										"type": "LinkedDomains",
										"endpoint": "https://bar.example.com"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a service.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/did/DidService"
								},
								"examples": {
									"identityServiceCreateResponseExample": {
										"value": {
											"id": "did:example:123#linked-domain",
											"type": "LinkedDomains",
											"serviceEndpoint": "https://bar.example.com"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service/{serviceId}": {
			"delete": {
				"operationId": "identityServiceRemove",
				"summary": "Remove an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the service from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "serviceId",
						"description": "The service to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:example:123#linked-domain"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential": {
			"post": {
				"operationId": "identityVerifiableCredentialCreate",
				"summary": "Create an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable credential.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateRequest"
							},
							"examples": {
								"identityVerifiableCredentialCreateRequestExample": {
									"value": {
										"credentialId": "https://example.com/credentials/3732",
										"subject": {
											"@context": "https://schema.org",
											"@type": "Person",
											"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
											"name": "Jane Doe"
										},
										"revocationIndex": 5
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateResponse"
								},
								"examples": {
									"identityVerifiableCredentialCreateResponseExample": {
										"value": {
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-credential/verify": {
			"get": {
				"operationId": "identityVerifiableCredentialVerify",
				"summary": "Verify an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialVerifyResponse"
								},
								"examples": {
									"identityVerifiableCredentialVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/revoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialRevoke",
				"summary": "Revoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to revoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to revoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/unrevoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialUnrevoke",
				"summary": "Unrevoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to unrevoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to unrevoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-presentation": {
			"post": {
				"operationId": "identityVerifiablePresentationCreate",
				"summary": "Create an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification presentation for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable presentation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateRequest"
							},
							"examples": {
								"identityVerifiablePresentationCreateRequestExample": {
									"value": {
										"presentationId": "https://example.com/presentation/3732",
										"verifiableCredentials": [
											"eyJraWQiOi...D1Z3AQ"
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateResponse"
								},
								"examples": {
									"IIdentityVerifiablePresentationCreateResponseExample": {
										"value": {
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-presentation/verify": {
			"get": {
				"operationId": "identityVerifiablePresentationVerify",
				"summary": "Verify an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationVerifyResponse"
								},
								"examples": {
									"identityVerifiablePresentationVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/proof": {
			"post": {
				"operationId": "identityProofCreate",
				"summary": "Create an identity proof",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the proof for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofCreateRequest"
							},
							"examples": {
								"identityProofCreateRequestExample": {
									"value": {
										"proofType": "DataIntegrityProof",
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/did/Proof"
								},
								"examples": {
									"identityProofCreateResponseExample": {
										"value": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2024-01-31T16:00:45.490Z",
											"verificationMethod": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "z2zGoejwpX6HH2T11BZaniEVZrqRKDpwbQSvPcL7eL9M7hV5P9zQQZxs85n6qyDzkkXCL8aFUWfwQD5bxVGqDK1fa"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/proof/verify": {
			"post": {
				"operationId": "identityProofVerify",
				"summary": "Verify an identity proof",
				"tags": [
					"Identity"
				],
				"requestBody": {
					"description": "Request to verify a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofVerifyRequest"
							},
							"examples": {
								"identityProofVerifyRequestExample": {
									"value": {
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										},
										"proof": {
											"@context": "https://www.w3.org/ns/credentials/v2",
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2025-01-24T11:32:13.106Z",
											"verificationMethod": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "2fVLgANruCBoRPBCJavi54mZtkQdyMz6T2N4XVyB96asawiriKrVWoktcSQ7dMGrBTiemBBDpcLE2HfiTBCGuBmq"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to verifying a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProofVerifyResponse"
								},
								"examples": {
									"identityProofVerifyResponseExample": {
										"value": {
											"verified": true
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile": {
			"post": {
				"operationId": "identityProfileCreate",
				"summary": "Create an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileCreateRequest"
							},
							"examples": {
								"identityProfileCreateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "The request resulted in a conflicting operation, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConflictResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "ConflictError",
											"message": "component.error",
											"properties": {
												"conflicts": [
													"1"
												]
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "identityProfileGet",
				"summary": "Get the identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "name,jobTitle"
					},
					{
						"name": "privatePropertyNames",
						"description": "The private properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileGetResponse"
								},
								"examples": {
									"identityGetResponseExample": {
										"value": {
											"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"publicProfile": {
												"@context": "https://schema.org",
												"@type": "Person",
												"jobTitle": "Professor",
												"name": "Jane Doe"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "identityProfileUpdate",
				"summary": "Update an identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileUpdateRequest"
							},
							"examples": {
								"identityProfileUpdateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "identityProfileRemove",
				"summary": "Remove an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/{identity}/public": {
			"get": {
				"operationId": "identityProfileGetPublic",
				"summary": "Get the identity profile public properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to get the profile for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					},
					{
						"name": "propertyNames",
						"description": "The properties to get for the public profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "role,email,name"
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity public profile.",
						"content": {
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
								},
								"examples": {
									"identityGetPublicResponseExample": {
										"value": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/query": {
			"get": {
				"operationId": "identitiesProfileList",
				"summary": "Get the list of profile data for identities",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicFilters",
						"description": "The public filters to apply to the list, comma separated list with color between key and value for each pair e.g. prop1:value1,prop2:value2.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The cursor for paged requests.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "Number of items to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a list of identities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileListResponse"
								},
								"examples": {
									"identitiesProfileListResponseExample": {
										"value": {
											"items": [
												{
													"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"publicProfile": {
														"@context": "https://schema.org",
														"@type": "Person",
														"jobTitle": "Professor",
														"name": "Jane Doe"
													}
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ConflictResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"conflicts": {
						"type": "array",
						"description": "The conflicting items.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"conflicts",
					"message",
					"name"
				],
				"description": "The body which contains the error."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"IdentityCreateRequest": {
				"type": "object",
				"properties": {
					"namespace": {
						"type": "string",
						"description": "The optional namespace to create the identity in."
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileCreateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileGetResponse": {
				"type": "object",
				"properties": {
					"identity": {
						"type": "string",
						"description": "The identity of the profile, this is the authenticated user identity."
					},
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"required": [
					"identity"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileListResponse": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"description": "The identities.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"identity": {
										"type": "string",
										"description": "The identity."
									},
									"publicProfile": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
									}
								},
								"required": [
									"identity"
								],
								"additionalProperties": false
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"items"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileUpdateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofCreateRequest": {
				"type": "object",
				"properties": {
					"proofType": {
						"$ref": "https://schema.twindev.org/did/ProofTypes"
					},
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"proofType",
					"document"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyRequest": {
				"type": "object",
				"properties": {
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"proof": {
						"$ref": "https://schema.twindev.org/did/Proof"
					}
				},
				"required": [
					"document",
					"proof"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyResponse": {
				"type": "object",
				"properties": {
					"verified": {
						"type": "boolean"
					}
				},
				"required": [
					"verified"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityServiceCreateRequest": {
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "string",
						"description": "The id of the service."
					},
					"type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The type of the service."
					},
					"endpoint": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The endpoint for the service."
					}
				},
				"required": [
					"serviceId",
					"type",
					"endpoint"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateRequest": {
				"type": "object",
				"properties": {
					"credentialId": {
						"type": "string",
						"description": "The id of the credential."
					},
					"subject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"revocationIndex": {
						"type": "number",
						"description": "The bitmap revocation index of the credential, if undefined will not have revocation status."
					}
				},
				"required": [
					"subject"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateResponse": {
				"type": "object",
				"properties": {
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/did/DidVerifiableCredential"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable credential."
					}
				},
				"required": [
					"verifiableCredential",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiableCredentialVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the credential been revoked."
					},
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/did/DidVerifiableCredential"
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationCreateRequest": {
				"type": "object",
				"properties": {
					"presentationId": {
						"type": "string",
						"description": "The id of the presentation."
					},
					"contexts": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
					},
					"types": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The types of the presentation."
					},
					"verifiableCredentials": {
						"type": "array",
						"description": "The verifiable credentials to include in the presentation.",
						"prefixItems": [
							{
								"anyOf": [
									{
										"type": "string"
									},
									{
										"$ref": "https://schema.twindev.org/did/DidVerifiableCredential"
									}
								]
							}
						]
					},
					"expiresInMinutes": {
						"type": "number",
						"description": "The expiration time for the presentation."
					}
				},
				"required": [
					"verifiableCredentials"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiablePresentationCreateResponse": {
				"type": "object",
				"properties": {
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/did/DidVerifiablePresentation"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable presentation."
					}
				},
				"required": [
					"verifiablePresentation",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the presentation been revoked."
					},
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/did/DidVerifiablePresentation"
					},
					"issuers": {
						"type": "array",
						"description": "The issuers of the presentation.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/did/DidDocument"
							}
						]
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerificationMethodCreateRequest": {
				"type": "object",
				"properties": {
					"verificationMethodType": {
						"$ref": "https://schema.twindev.org/did/DidVerificationMethodType"
					},
					"verificationMethodId": {
						"type": "string",
						"description": "The optional id for the verification method, will be allocated if not supplied."
					}
				},
				"required": [
					"verificationMethodType"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"NotFoundResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"notFoundId": {
						"type": "string",
						"description": "The id if the item that was not found."
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"message",
					"name"
				],
				"description": "The body which contains the error."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
